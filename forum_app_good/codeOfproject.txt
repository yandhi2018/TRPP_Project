<!-- base.html -->
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Game Forum{% endblock %}</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <header class="navbar">
        <div class="container">
            <h1 class="logo">Game Forum</h1>
            <nav class="nav-links">
                <a href="/">Главная</a>
                <a href="/forum">Форум</a>
                <a href="/marketplace">Торговая площадка</a>
                
                {% if current_user.is_authenticated %}
                    <a href="/create_post">Создать пост</a>
                    <div class="user-menu">
                        <img src="/static/user-icon.png" alt="Профиль" class="user-icon">
                        <div class="dropdown-content">
                            <p>{{ current_user.username }}</p>
                            <a href="/profile">Мои посты</a>
                            <a href="/logout">Выйти</a>
                        </div>
                    </div>
                {% else %}
                    <a href="/login">Войти</a>
                    <a href="/register">Регистрация</a>
                {% endif %}
            </nav>
        </div>
    </header>
    
    <main class="container">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="flash {{ category }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        
        {% block content %}{% endblock %}
    </main>
</body>
</html>
------------------------------------------------------------------------------------------------------------------------------------------------
#create_post.html

{% extends "base.html" %}

{% block title %}Создать пост - Game Forum{% endblock %}

{% block content %}
    <h2>Создать пост</h2>
    <form method="POST" action="{{ url_for('create_post') }}" id="post-form" enctype="multipart/form-data">
        <div class="form-group">
            <label for="title">Заголовок:</label>
            <input type="text" id="title" name="title" required>
        </div>
        
        <div class="form-group">
            <label for="section">Раздел:</label>
            <select id="section" name="section">
                <option value="discussion">Обсуждение</option>
                <option value="guides">Гайды</option>
                <option value="marketplace" {% if request.args.get('section') == 'marketplace' %}selected{% endif %}>Торговая площадка</option>
            </select>
        </div>

        {% if request.args.get('section') == 'marketplace' or request.args.get('price') %}
        <div class="form-group">
            <label for="price">Цена (руб):</label>
            <input type="number" id="price" name="price" min="0" step="0.01" placeholder="Укажите цену">
        </div>
        {% endif %}
        
        <div class="editor-container">
            <div id="editor"></div>
            <input type="hidden" name="content" id="post-content">
        </div>
        
        <div class="upload-section">
            <label>Добавить изображения:</label>
            <div class="upload-controls">
                <input type="file" id="image-upload" accept="image/*" multiple style="display: none;">
                <button type="button" id="upload-btn" class="btn">Выбрать файлы</button>
                <div id="upload-progress"></div>
            </div>
            <div id="image-preview" class="image-preview"></div>
        </div>
        
        <button type="submit" class="btn btn-primary">Опубликовать</button>
    </form>

    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/quill-image-resize-module@3.0.0/image-resize.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/quill-image-drop-and-paste@1.3.0/dist/quill-image-drop-and-paste.min.js"></script>
    
    <script>
        // Конфигурация редактора
        const quill = new Quill('#editor', {
            theme: 'snow',
            placeholder: 'Напишите ваш пост здесь...',
            modules: {
                toolbar: [
                    ['bold', 'italic', 'underline', 'strike'],
                    ['blockquote', 'code-block'],
                    [{ 'header': 1 }, { 'header': 2 }],
                    [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                    [{ 'script': 'sub'}, { 'script': 'super' }],
                    [{ 'indent': '-1'}, { 'indent': '+1' }],
                    [{ 'direction': 'rtl' }],
                    [{ 'size': ['small', false, 'large', 'huge'] }],
                    [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                    [{ 'color': [] }, { 'background': [] }],
                    [{ 'font': [] }],
                    [{ 'align': [] }],
                    ['clean'],
                    ['link', 'image'],
                    ['image-resize'],
                    ['image-align']
                ],
                imageResize: {
                    modules: ['Resize', 'DisplaySize', 'Toolbar'],
                    handleStyles: {
                        backgroundColor: '#3498db',
                        border: '2px solid white'
                    }
                },
                imageDropAndPaste: {
                    handler: function(imageDataUrl) {
                        insertImageToEditor(imageDataUrl);
                    }
                }
            }
        });

        // Элементы управления
        const fileInput = document.getElementById('image-upload');
        const uploadBtn = document.getElementById('upload-btn');
        const progressDiv = document.getElementById('upload-progress');
        const previewDiv = document.getElementById('image-preview');
        
        // Обработчики событий
        uploadBtn.addEventListener('click', () => fileInput.click());
        
        fileInput.addEventListener('change', async function(e) {
            const files = e.target.files;
            if (!files.length) return;
            
            progressDiv.textContent = `Загрузка ${files.length} изображений...`;
            
            for (let file of files) {
                if (!file.type.match('image.*')) continue;
                
                try {
                    const imageUrl = await readFileAsDataURL(file);
                    insertImageToEditor(imageUrl);
                    showImagePreview(imageUrl);
                } catch (error) {
                    console.error('Ошибка загрузки:', error);
                }
            }
            
            progressDiv.textContent = `Загружено ${files.length} изображений`;
            setTimeout(() => progressDiv.textContent = '', 2000);
            fileInput.value = '';
        });
        
        // Функции помощники
        function readFileAsDataURL(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve(reader.result);
                reader.onerror = reject;
                reader.readAsDataURL(file);
            });
        }
        
        function insertImageToEditor(imageUrl) {
            const range = quill.getSelection();
            quill.insertEmbed(range.index, 'image', imageUrl, 'user');
            quill.setSelection(range.index + 1);
        }
        
        function showImagePreview(imageUrl) {
            const img = document.createElement('img');
            img.src = imageUrl;
            img.classList.add('preview-thumbnail');
            previewDiv.appendChild(img);
        }
        
        // Перед отправкой формы
        document.getElementById('post-form').addEventListener('submit', function() {
            document.getElementById('post-content').value = quill.root.innerHTML;
        });
    </script>
{% endblock %}

------------------------------------------------------------------------------------------------------------------------------------------------
#edit_post.html

{% extends "base.html" %}

{% block title %}Редактировать пост - Game Forum{% endblock %}

{% block content %}
    <h2>Редактировать пост</h2>
    <form method="POST" action="{{ url_for('edit_post', post_id=post.id) }}" id="post-form" enctype="multipart/form-data">
        <div class="form-group">
            <label for="title">Заголовок:</label>
            <input type="text" id="title" name="title" value="{{ post.title }}" required>
        </div>
        
        <div class="form-group">
            <label for="section">Раздел:</label>
            <select id="section" name="section">
                <option value="discussion" {% if post.section == 'discussion' %}selected{% endif %}>Обсуждение</option>
                <option value="guides" {% if post.section == 'guides' %}selected{% endif %}>Гайды</option>
                <option value="marketplace" {% if post.section == 'marketplace' %}selected{% endif %}>Торговая площадка</option>
            </select>
        </div>

        {% if post.section == 'marketplace' %}
        <div class="form-group">
            <label for="price">Цена (руб):</label>
            <input type="number" id="price" name="price" min="0" step="0.01" 
                   value="{{ post.price if post.price else '' }}" placeholder="Укажите цену">
        </div>
        {% endif %}
        
        <div class="editor-container">
            <div id="editor">{{ post.content|safe }}</div>
            <input type="hidden" name="content" id="post-content">
        </div>
        
        <div class="upload-section">
            <label>Добавить изображения:</label>
            <div class="upload-controls">
                <input type="file" id="image-upload" accept="image/*" multiple style="display: none;">
                <button type="button" id="upload-btn" class="btn">Выбрать файлы</button>
                <div id="upload-progress"></div>
            </div>
            <div id="image-preview" class="image-preview"></div>
        </div>
        
        <button type="submit" class="btn btn-primary">Сохранить изменения</button>
    </form>

    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/quill-image-resize-module@3.0.0/image-resize.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/quill-image-drop-and-paste@1.3.0/dist/quill-image-drop-and-paste.min.js"></script>
    
    <script>
        // Конфигурация редактора
        const quill = new Quill('#editor', {
            theme: 'snow',
            placeholder: 'Напишите ваш пост здесь...',
            modules: {
                toolbar: [
                    ['bold', 'italic', 'underline', 'strike'],
                    ['blockquote', 'code-block'],
                    [{ 'header': 1 }, { 'header': 2 }],
                    [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                    [{ 'script': 'sub'}, { 'script': 'super' }],
                    [{ 'indent': '-1'}, { 'indent': '+1' }],
                    [{ 'direction': 'rtl' }],
                    [{ 'size': ['small', false, 'large', 'huge'] }],
                    [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                    [{ 'color': [] }, { 'background': [] }],
                    [{ 'font': [] }],
                    [{ 'align': [] }],
                    ['clean'],
                    ['link', 'image'],
                    ['image-resize'],
                    ['image-align']
                ],
                imageResize: {
                    modules: ['Resize', 'DisplaySize', 'Toolbar'],
                    handleStyles: {
                        backgroundColor: '#3498db',
                        border: '2px solid white'
                    }
                },
                imageDropAndPaste: {
                    handler: function(imageDataUrl) {
                        insertImageToEditor(imageDataUrl);
                    }
                }
            }
        });

        // Элементы управления
        const fileInput = document.getElementById('image-upload');
        const uploadBtn = document.getElementById('upload-btn');
        const progressDiv = document.getElementById('upload-progress');
        const previewDiv = document.getElementById('image-preview');
        
        // Обработчики событий
        uploadBtn.addEventListener('click', () => fileInput.click());
        
        fileInput.addEventListener('change', async function(e) {
            const files = e.target.files;
            if (!files.length) return;
            
            progressDiv.textContent = `Загрузка ${files.length} изображений...`;
            
            for (let file of files) {
                if (!file.type.match('image.*')) continue;
                
                try {
                    const imageUrl = await readFileAsDataURL(file);
                    insertImageToEditor(imageUrl);
                    showImagePreview(imageUrl);
                } catch (error) {
                    console.error('Ошибка загрузки:', error);
                }
            }
            
            progressDiv.textContent = `Загружено ${files.length} изображений`;
            setTimeout(() => progressDiv.textContent = '', 2000);
            fileInput.value = '';
        });
        
        // Функции помощники
        function readFileAsDataURL(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve(reader.result);
                reader.onerror = reject;
                reader.readAsDataURL(file);
            });
        }
        
        function insertImageToEditor(imageUrl) {
            const range = quill.getSelection();
            quill.insertEmbed(range.index, 'image', imageUrl, 'user');
            quill.setSelection(range.index + 1);
        }
        
        function showImagePreview(imageUrl) {
            const img = document.createElement('img');
            img.src = imageUrl;
            img.classList.add('preview-thumbnail');
            previewDiv.appendChild(img);
        }
        
        // Перед отправкой формы
        document.getElementById('post-form').addEventListener('submit', function() {
            document.getElementById('post-content').value = quill.root.innerHTML;
        });
    </script>
{% endblock %}
------------------------------------------------------------------------------------------------------------------------------------------------
#forum.html

{% extends "base.html" %}

{% block title %}Форум - Game Forum{% endblock %}

{% block content %}
    <h2>Все обсуждения</h2>
    
    <div class="forum-controls">
        <form method="GET" action="/forum" class="search-form">
            <input type="text" name="search" placeholder="Поиск..." value="{{ search_query }}">
            <select name="section_filter">
                <option value="">Все разделы</option>
                <option value="discussion" {% if section_filter == 'discussion' %}selected{% endif %}>Обсуждения</option>
                <option value="guides" {% if section_filter == 'guides' %}selected{% endif %}>Гайды</option>
            </select>
            <button type="submit" class="btn">Применить</button>
        </form>
        
        {% if current_user.is_authenticated %}
            <a href="{{ url_for('create_post') }}" class="btn">Создать пост</a>
        {% endif %}
    </div>

    {% if posts.items %}
        {% for post in posts.items %}
            <div class="post">
                <h3><a href="{{ url_for('post_detail', post_id=post.id) }}">{{ post.title }}</a></h3>
                <div class="post-preview-content">
                    {{ post.content|striptags|truncate(200) }}
                </div>
                <small>
                    Раздел: {{ post.section }} | 
                    Автор: {{ post.author.username }} | 
                    {{ post.created_at.strftime('%d.%m.%Y %H:%M') }} |
                    Просмотров: {{ post.views|default(0) }}
                </small>
            
                {% if current_user.is_authenticated and current_user.id == post.user_id %}
                    <div class="post-actions">
                        <a href="{{ url_for('edit_post', post_id=post.id) }}" class="btn">Редактировать</a>
                        <form method="POST" action="{{ url_for('delete_post', post_id=post.id) }}" style="display: inline;">
                            <button type="submit" class="btn btn-danger">Удалить</button>
                        </form>
                    </div>
                {% endif %}
            </div>
        {% endfor %}
    {% else %}
        <div class="no-posts">
            <p>Пока нет ни одного обсуждения. Будьте первым!</p>
            {% if current_user.is_authenticated %}
                <a href="{{ url_for('create_post') }}" class="btn">Создать пост</a>
            {% endif %}
        </div>
    {% endif %}
    
    {% if posts.pages > 1 %}
        <div class="pagination">
            {% if posts.has_prev %}
                <a href="{{ url_for('forum', page=posts.prev_num, search=search_query, section_filter=section_filter) }}" class="btn">← Назад</a>
            {% endif %}
            <span>Страница {{ posts.page }} из {{ posts.pages }}</span>
            {% if posts.has_next %}
                <a href="{{ url_for('forum', page=posts.next_num, search=search_query, section_filter=section_filter) }}" class="btn">Вперед →</a>
            {% endif %}
        </div>
    {% endif %}

    <style>
        .forum-controls {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .search-form {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .search-form input,
        .search-form select {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        .post {
            background: white;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .post h3 {
            margin-top: 0;
            margin-bottom: 10px;
        }
        
        .post h3 a {
            color: var(--primary-color);
            text-decoration: none;
        }
        
        .post-preview-content {
            margin: 10px 0;
            color: #555;
            line-height: 1.5;
        }
        
        .post small {
            display: block;
            margin-top: 10px;
            color: #666;
        }
        
        .no-posts {
            text-align: center;
            padding: 40px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .post-actions {
            margin-top: 15px;
            display: flex;
            gap: 10px;
        }
    </style>
{% endblock %}
------------------------------------------------------------------------------------------------------------------------------------------------
#index.html

{% extends "base.html" %}

{% block title %}Главная страница - Game Forum{% endblock %}

{% block content %}
    <h2>Все посты</h2>
    
    {% for post in posts.items %}
        <div class="post-preview">
            <a href="{{ url_for('post_detail', post_id=post.id) }}">
                <h3>{{ post.title }}</h3>
                <small>
                    Раздел: {{ post.section }} | 
                    Автор: {{ post.author.username }} | 
                    {{ post.created_at.strftime('%d.%m.%Y %H:%M') }}
                </small>
            </a>
        </div>
    {% endfor %}
    
    <div class="pagination">
        {% if posts.has_prev %}
            <a href="{{ url_for('index', page=posts.prev_num) }}" class="btn">← Назад</a>
        {% endif %}
        <span>Страница {{ posts.page }} из {{ posts.pages }}</span>
        {% if posts.has_next %}
            <a href="{{ url_for('index', page=posts.next_num) }}" class="btn">Вперед →</a>
        {% endif %}
    </div>
{% endblock %}
------------------------------------------------------------------------------------------------------------------------------------------------
#login.html

{% extends "base.html" %}

{% block title %}Вход - Game Forum{% endblock %}

{% block content %}
    <h2>Вход</h2>
    <form method="POST" action="/login" class="form">
        <label>Имя пользователя:</label>
        <input type="text" name="username" required>
        <label>Пароль:</label>
        <input type="password" name="password" required>
        <button type="submit" class="btn">Войти</button>
    </form>
    <p>Нет аккаунта? <a href="/register">Зарегистрируйтесь</a></p>
{% endblock %}
------------------------------------------------------------------------------------------------------------------------------------------------
#marketplace.html

{% extends "base.html" %}

{% block title %}Торговая площадка - Game Forum{% endblock %}

{% block content %}
    <div class="marketplace-container">
        <h2>Торговая площадка</h2>
        
        <div class="marketplace-controls">
            <form method="GET" action="{{ url_for('marketplace') }}" class="search-form">
                <input type="text" name="search" placeholder="Поиск товаров..." value="{{ search_query }}">
                <select name="price_filter">
                    <option value="">Любая цена</option>
                    <option value="0-1000" {% if price_filter == '0-1000' %}selected{% endif %}>До 1000 руб</option>
                    <option value="1000-5000" {% if price_filter == '1000-5000' %}selected{% endif %}>1000-5000 руб</option>
                    <option value="5000+" {% if price_filter == '5000+' %}selected{% endif %}>От 5000 руб</option>
                </select>
                <button type="submit" class="btn">Применить</button>
            </form>
            
            {% if current_user.is_authenticated %}
                <a href="{{ url_for('create_post') }}?section=marketplace&price=1" class="btn btn-primary">Добавить товар</a>
            {% endif %}
        </div>

        <div class="items-list">
            {% for item in items.items %}
                <div class="marketplace-item">
                    <div class="item-header">
                        <h3><a href="{{ url_for('post_detail', post_id=item.id) }}">{{ item.title }}</a></h3>
                        <div class="item-meta">
                            <span class="price">{% if item.price %}{{ "%.2f"|format(item.price) }} руб{% else %}Цена не указана{% endif %}</span>
                            <span class="author">Продавец: {{ item.author.username }}</span>
                            <span class="date">{{ item.created_at.strftime('%d.%m.%Y') }}</span>
                        </div>
                    </div>
                    
                    <div class="item-content">
                        {{ item.content|striptags|truncate(200) }}
                    </div>
                    
                    {% if item.images %}
                        <div class="item-images">
                            {% for image in item.images %}
                                {% if image.filename %}
                                    <img src="{{ url_for('static', filename='uploads/' + image.filename) }}" alt="Фото товара" class="item-image">
                                {% endif %}
                            {% endfor %}
                        </div>
                    {% endif %}
                    
                    <!-- Блок управления для автора -->
                    {% if current_user.is_authenticated and current_user.id == item.user_id %}
                        <div class="item-actions">
                            <a href="{{ url_for('edit_post', post_id=item.id) }}" class="btn btn-sm">Редактировать</a>
                            <form method="POST" action="{{ url_for('delete_post', post_id=item.id) }}" onsubmit="return confirm('Удалить этот товар?')">
                                <button type="submit" class="btn btn-sm btn-danger">Удалить</button>
                            </form>
                        </div>
                    {% endif %}
                    
                    <!-- Секция комментариев -->
                    <div class="item-comments">
                        <h4>Обсуждение ({{ item.comments|length }})</h4>
                        
                        {% if current_user.is_authenticated %}
                            <form method="POST" action="{{ url_for('add_comment', post_id=item.id) }}" class="comment-form">
                                <textarea name="text" placeholder="Ваш вопрос о товаре..." required></textarea>
                                <button type="submit" class="btn btn-sm">Отправить</button>
                            </form>
                        {% else %}
                            <p class="auth-notice"><a href="{{ url_for('login') }}">Войдите</a>, чтобы задать вопрос</p>
                        {% endif %}
                        
                        <div class="comments-list">
                            {% for comment in item.comments[-3:]|reverse %}
                                <div class="comment">
                                    <div class="comment-header">
                                        <strong>{{ comment.author.username }}</strong>
                                        <small>{{ comment.created_at.strftime('%d.%m.%Y %H:%M') }}</small>
                                    </div>
                                    <div class="comment-text">{{ comment.text }}</div>
                                </div>
                            {% endfor %}
                            
                            {% if item.comments|length > 3 %}
                                <a href="{{ url_for('post_detail', post_id=item.id) }}" class="show-all">Показать все комментарии ({{ item.comments|length }})</a>
                            {% endif %}
                        </div>
                    </div>
                </div>
            {% else %}
                <div class="no-items">
                    <p>Пока нет товаров в продаже</p>
                    {% if current_user.is_authenticated %}
                        <a href="{{ url_for('create_post') }}?section=marketplace" class="btn">Добавить первый товар</a>
                    {% endif %}
                </div>
            {% endfor %}
        </div>
        
        <!-- Пагинация -->
        {% if items.pages > 1 %}
            <div class="pagination">
                {% if items.has_prev %}
                    <a href="{{ url_for('marketplace', page=items.prev_num, search=search_query, price_filter=price_filter) }}" class="btn">← Назад</a>
                {% endif %}
                
                <span>Страница {{ items.page }} из {{ items.pages }}</span>
                
                {% if items.has_next %}
                    <a href="{{ url_for('marketplace', page=items.next_num, search=search_query, price_filter=price_filter) }}" class="btn">Вперед →</a>
                {% endif %}
            </div>
        {% endif %}
    </div>

    <style>
        /* Основные стили */
        .price {
            font-weight: bold;
            color: #27ae60;
            font-size: 1.1em;
        }
        
        .marketplace-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .marketplace-controls {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }
        
        .search-form {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .search-form input,
        .search-form select {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        
        /* Стили товаров */
        .items-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .marketplace-item {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .item-header h3 {
            margin-top: 0;
            margin-bottom: 5px;
        }
        
        .item-header h3 a {
            color: #2c3e50;
            text-decoration: none;
        }
        
        .item-meta {
            display: flex;
            gap: 15px;
            font-size: 0.9em;
            color: #666;
            flex-wrap: wrap;
        }
        
        .item-meta .price {
            font-weight: bold;
            color: #27ae60;
        }
        
        .item-content {
            line-height: 1.5;
            color: #333;
        }
        
        .item-images {
            display: flex;
            gap: 10px;
            overflow-x: auto;
            padding-bottom: 10px;
        }
        
        .item-image {
            height: 120px;
            width: auto;
            border-radius: 4px;
            object-fit: cover;
            border: 1px solid #eee;
        }
        
        .item-actions {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        
        /* Стили комментариев */
        .item-comments {
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid #eee;
        }
        
        .item-comments h4 {
            margin-top: 0;
            margin-bottom: 10px;
            font-size: 1.1em;
        }
        
        .comment-form textarea {
            width: 100%;
            min-height: 80px;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
        }
        
        .auth-notice {
            text-align: center;
            color: #666;
            margin: 10px 0;
        }
        
        .auth-notice a {
            color: #3498db;
        }
        
        .comments-list {
            margin-top: 15px;
        }
        
        .comment {
            margin-bottom: 15px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 4px;
        }
        
        .comment-header {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
            gap: 10px;
        }
        
        .comment-header strong {
            font-size: 0.9em;
        }
        
        .comment-header small {
            color: #666;
            font-size: 0.8em;
        }
        
        .comment-text {
            font-size: 0.9em;
            line-height: 1.4;
        }
        
        .show-all {
            display: block;
            text-align: center;
            margin-top: 10px;
            font-size: 0.9em;
            color: #3498db;
        }
        
        /* Адаптивность */
        @media (max-width: 768px) {
            .items-list {
                grid-template-columns: 1fr;
            }
            
            .marketplace-controls {
                flex-direction: column;
            }
        }
    </style>
{% endblock %}

------------------------------------------------------------------------------------------------------------------------------------------------
#post_detail.html

{% extends "base.html" %}

{% block title %}{{ post.title }} - Game Forum{% endblock %}

{% block content %}
<div class="post-container">
    <div class="post-header">
        <h1>{{ post.title }}</h1>
        <div class="post-meta">
            <span>Автор: {{ post.author.username }}</span>
            <span>Раздел: {{ post.section }}</span>
            <span>{{ post.created_at.strftime('%d.%m.%Y %H:%M') }}</span>
        </div>
    </div>

    <div class="post-content">
        {{ post.content|safe }}
    </div>

    {% if current_user.is_authenticated and current_user.id == post.user_id %}
    <div class="post-actions">
        <a href="{{ url_for('edit_post', post_id=post.id) }}" class="btn">Редактировать</a>
        <form method="POST" action="{{ url_for('delete_post', post_id=post.id) }}">
            <button type="submit" class="btn btn-danger">Удалить</button>
        </form>
    </div>
    {% endif %}

    <div class="comments-section">
        <h3>Комментарии ({{ post.comments|length }})</h3>
        
        {% if current_user.is_authenticated %}
        <form method="POST" action="{{ url_for('add_comment', post_id=post.id) }}" class="comment-form">
            <textarea name="text" required placeholder="Ваш комментарий..."></textarea>
            <button type="submit" class="btn">Отправить</button>
        </form>
        {% else %}
        <p><a href="{{ url_for('login') }}">Войдите</a>, чтобы оставить комментарий</p>
        {% endif %}
        
        <div class="comments-list">
            {% for comment in post.comments %}
            <div class="comment">
                <div class="comment-header">
                    <strong>{{ comment.author.username }}</strong>
                    <small>{{ comment.created_at.strftime('%d.%m.%Y %H:%M') }}</small>
                    
                    {% if current_user.is_authenticated and (current_user.id == comment.user_id or current_user.is_admin) %}
                    <form method="POST" action="{{ url_for('delete_comment', comment_id=comment.id) }}" class="delete-comment">
                        <button type="submit" class="btn btn-sm btn-danger">Удалить</button>
                    </form>
                    {% endif %}
                </div>
                <div class="comment-text">{{ comment.text }}</div>
            </div>
            {% else %}
            <p>Пока нет комментариев</p>
            {% endfor %}
        </div>

<style>
.post-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}

.post-header h1 {
    margin-top: 0;
}

.post-meta {
    display: flex;
    gap: 15px;
    margin: 10px 0;
    color: #666;
    font-size: 0.9em;
}

.post-content {
    line-height: 1.6;
    margin: 20px 0;
}

.post-actions {
    display: flex;
    gap: 10px;
    margin: 20px 0;
}

.comments-section {
    margin-top: 40px;
    padding-top: 20px;
    border-top: 1px solid #eee;
}

.comment-form textarea {
    width: 100%;
    min-height: 100px;
    padding: 10px;
    margin-bottom: 10px;
}

.comments-list {
    margin-top: 20px;
}

.comment {
    padding: 15px;
    margin-bottom: 15px;
    background: #f9f9f9;
    border-radius: 4px;
}

.comment-header {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
}

.comment-header strong {
    margin-right: 10px;
}

.comment-header small {
    color: #666;
}

.delete-comment {
    margin-left: auto;
}
</style>
{% endblock %}

------------------------------------------------------------------------------------------------------------------------------------------------
#post_editor.html

<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<script src="https://cdn.jsdelivr.net/npm/quill-image-resize-module@3.0.0/image-resize.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/quill-image-drop-and-paste@1.3.0/dist/quill-image-drop-and-paste.min.js"></script>

<script>
    // Инициализация редактора
    const quill = new Quill('#editor', {
        theme: 'snow',
        placeholder: 'Напишите ваш пост здесь...',
        modules: {
            toolbar: [
                ['bold', 'italic', 'underline', 'strike'],
                ['blockquote', 'code-block'],
                [{ 'header': 1 }, { 'header': 2 }],
                [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                [{ 'script': 'sub'}, { 'script': 'super' }],
                [{ 'indent': '-1'}, { 'indent': '+1' }],
                [{ 'direction': 'rtl' }],
                [{ 'size': ['small', false, 'large', 'huge'] }],
                [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                [{ 'color': [] }, { 'background': [] }],
                [{ 'font': [] }],
                [{ 'align': [] }],
                ['clean'],
                ['link', 'image'],
                ['image-resize'],
                ['image-align']
            ],
            imageResize: {
                modules: ['Resize', 'DisplaySize', 'Toolbar'],
                handleStyles: {
                    backgroundColor: '#3498db',
                    border: '2px solid white'
                }
            },
            imageDropAndPaste: {
                handler: function(imageDataUrl) {
                    insertImageToEditor(imageDataUrl);
                }
            }
        }
    });

    // Обработчики загрузки изображений
    document.getElementById('upload-btn').addEventListener('click', () => {
        document.getElementById('image-upload').click();
    });

    document.getElementById('image-upload').addEventListener('change', handleImageUpload);

    function handleImageUpload(e) {
        const files = e.target.files;
        if (!files.length) return;
        
        document.getElementById('upload-progress').textContent = `Загрузка ${files.length} изображений...`;
        
        Array.from(files).forEach(file => {
            if (!file.type.match('image.*')) return;
            
            const reader = new FileReader();
            reader.onload = (e) => {
                insertImageToEditor(e.target.result);
                showImagePreview(e.target.result);
            };
            reader.readAsDataURL(file);
        });
        
        document.getElementById('upload-progress').textContent = `Загружено ${files.length} изображений`;
        setTimeout(() => document.getElementById('upload-progress').textContent = '', 2000);
        e.target.value = '';
    }

    function insertImageToEditor(imageUrl) {
        const range = quill.getSelection();
        quill.insertEmbed(range.index, 'image', imageUrl, 'user');
        quill.setSelection(range.index + 1);
    }

    function showImagePreview(imageUrl) {
        const img = document.createElement('img');
        img.src = imageUrl;
        img.classList.add('preview-thumbnail');
        document.getElementById('image-preview').appendChild(img);
    }

    // Перед отправкой формы
    document.getElementById('post-form').addEventListener('submit', function() {
        document.getElementById('post-content').value = quill.root.innerHTML;
    });
</script>

------------------------------------------------------------------------------------------------------------------------------------------------
#post_form.html

<div class="form-group">
    <label for="title">Заголовок:</label>
    <input type="text" id="title" name="title" {% if post %}value="{{ post.title }}"{% endif %} required>
</div>

<div class="form-group">
    <label for="section">Раздел:</label>
    <select id="section" name="section">
        <option value="discussion" {% if post and post.section == 'discussion' %}selected{% endif %}>Обсуждение</option>
        <option value="guides" {% if post and post.section == 'guides' %}selected{% endif %}>Гайды</option>
        <option value="marketplace" {% if post and post.section == 'marketplace' %}selected{% endif %}>Торговая площадка</option>
    </select>
</div>

<div class="editor-container">
    <div id="editor">{% if post %}{{ post.content|safe }}{% endif %}</div>
    <input type="hidden" name="content" id="post-content">
</div>

<div class="upload-section">
    <label>Добавить изображения:</label>
    <div class="upload-controls">
        <input type="file" id="image-upload" accept="image/*" multiple>
        <button type="button" id="upload-btn" class="btn">Выбрать файлы</button>
        <div id="upload-progress"></div>
    </div>
    <div id="image-preview" class="image-preview"></div>
</div>
------------------------------------------------------------------------------------------------------------------------------------------------
#profile.html

{% extends "base.html" %}

{% block title %}Профиль - {{ current_user.username }}{% endblock %}

{% block content %}
    <h2>Мои посты</h2>
    
    {% if posts.items %}
        {% for post in posts.items %}
            <div class="post">
                <h3><a href="{{ url_for('post_detail', post_id=post.id) }}">{{ post.title }}</a></h3>
                <div class="post-preview-content">
                    {{ post.content|striptags|truncate(200) }}
                </div>
                <small>
                    Раздел: {{ post.section }} | 
                    {{ post.created_at.strftime('%d.%m.%Y %H:%M') }}
                    | Просмотров: {{ post.views|default(0) }}
                </small>
                
                <div class="post-actions">
                    <a href="{{ url_for('edit_post', post_id=post.id) }}" class="btn">Редактировать</a>
                    <form method="POST" action="{{ url_for('delete_post', post_id=post.id) }}" style="display: inline;">
                        <button type="submit" class="btn btn-danger">Удалить</button>
                    </form>
                </div>
            </div>
        {% endfor %}
    {% else %}
        <div class="no-posts">
            <p>У вас пока нет ни одного поста.</p>
            <a href="{{ url_for('create_post') }}" class="btn">Создать первый пост</a>
        </div>
    {% endif %}
    
    {% if posts.pages > 1 %}
        <div class="pagination">
            {% if posts.has_prev %}
                <a href="{{ url_for('profile', page=posts.prev_num) }}" class="btn">← Назад</a>
            {% endif %}
            <span>Страница {{ posts.page }} из {{ posts.pages }}</span>
            {% if posts.has_next %}
                <a href="{{ url_for('profile', page=posts.next_num) }}" class="btn">Вперед →</a>
            {% endif %}
        </div>
    {% endif %}

    <style>
        .post {
            background: white;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: relative;
        }
        
        .post h3 {
            margin-top: 0;
            margin-bottom: 10px;
        }
        
        .post h3 a {
            color: var(--primary-color);
            text-decoration: none;
        }
        
        .post-preview-content {
            margin: 10px 0;
            color: #555;
            line-height: 1.5;
        }
        
        .post small {
            display: block;
            margin-top: 10px;
            color: #666;
        }
        
        .no-posts {
            text-align: center;
            padding: 40px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .post-actions {
            margin-top: 15px;
            display: flex;
            gap: 10px;
        }
    </style>
{% endblock %}

------------------------------------------------------------------------------------------------------------------------------------------------
#register.html

{% extends "base.html" %}

{% block title %}Регистрация - Game Forum{% endblock %}

{% block content %}
    <h2>Регистрация</h2>
    <form method="POST" action="/register" class="form">
        <label>Имя пользователя:</label>
        <input type="text" name="username" required>
        <label>Пароль:</label>
        <input type="password" name="password" required>
        <button type="submit" class="btn">Зарегистрироваться</button>
    </form>
    <p>Уже есть аккаунт? <a href="/login">Войдите</a></p>
{% endblock %}

------------------------------------------------------------------------------------------------------------------------------------------------
#style.css

:root {
    --primary-color: #3498db;
    --success-color: #2ecc71;
    --error-color: #e74c3c;
    --background-color: #f4f4f4;
    --text-color: #333;
    --header-color: #2c3e50;
}

body {
    background-color: var(--background-color);
    color: var(--text-color);
    font-family: 'Roboto', sans-serif;
    margin: 0;
    padding: 0;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
}

.navbar {
    background-color: var(--primary-color);
    padding: 1rem 0;
    position: relative;
}

.navbar .container {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.navbar .logo {
    color: white;
    font-size: 1.5rem;
    font-weight: 700;
    text-decoration: none;
}

.nav-links {
    display: flex;
    gap: 1rem; /* Равное расстояние между элементами */
    align-items: center;
}

.nav-links a {
    margin-right: 1rem; /* Единый отступ */
    color: white;
    text-decoration: none;
}

.user-menu {
    position: relative;
    display: inline-block;
    margin-left: 1rem;
}

.user-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    cursor: pointer;
    border: 2px solid white;
    transition: 0.3s;
}

.dropdown-content {
    display: none;
    position: absolute;
    right: 0;
    background-color: white;
    min-width: 160px;
    box-shadow: 0px 8px 16px rgba(0,0,0,0.2);
    border-radius: 4px;
    z-index: 1;
    padding: 10px;
}

.user-menu:hover .dropdown-content {
    display: block;
}

.nav-links a.btn {
    background-color: var(--primary-color);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    margin-left: 1rem;
}

.dropdown-content p {
    margin: 0 0 10px;
    font-weight: bold;
    color: var(--text-color);
}

.dropdown-content a {
    color: var(--text-color);
    padding: 8px 0;
    display: block;
    text-align: left;
}

.user-menu:hover .dropdown-content {
    display: block;
}

.post {
    background: white;
    padding: 20px;
    margin-bottom: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.post-preview-content {
    margin: 10px 0;
    color: #555;
    line-height: 1.5;
}

.no-posts {
    text-align: center;
    padding: 40px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.post-preview {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    padding: 1rem;
    margin-bottom: 1rem;
}

.post h3 {
    margin-top: 0;
    color: var(--primary-color);
}

.post-preview small {
    display: block;
    margin-top: 0.5rem;
    color: #666;
}

.form {
    background-color: white;
    padding: 1rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.form label {
    display: block;
    margin-bottom: 0.5rem;
}

.form input,
.form textarea,
.form select {
    width: 100%;
    padding: 0.5rem;
    margin-bottom: 1rem;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.btn {
    background-color: var(--primary-color);
    color: white;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: 0.3s;
}

.btn:hover {
    background-color: #2980b9;
}

.btn-danger {
    background-color: var(--error-color);
}

.btn-danger:hover {
    background-color: #c0392b;
}

.flash {
    padding: 0.5rem;
    border-radius: 4px;
    margin-bottom: 1rem;
}

.flash.success {
    background-color: var(--success-color);
    color: white;
}

.flash.error {
    background-color: var(--error-color);
    color: white;
}

.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 15px;
    margin-top: 20px;
}

.pagination .btn {
    padding: 5px 10px;
    background-color: #3498db;
    color: white;
    text-decoration: none;
    border-radius: 4px;
}

.pagination span {
    font-size: 0.9rem;
}

.post-actions {
    margin-top: 10px;
    display: flex;
    gap: 10px;
}

@media (max-width: 768px) {
    .navbar .container {
        flex-direction: column;
    }
    
    .nav-links {
        flex-direction: column;
        align-items: center;
    }
}
.flash {
  padding: 0.5rem;
  border-radius: 4px;
  margin-bottom: 1rem;
}

.flash.success {
  background-color: #d4edda;
  color: #155724;
}

.flash.error {
  background-color: #f8d7da;
  color: #721c24;
}
.nav-links a:hover {
  text-decoration: none;
  background-color: #2980b9;
  border-radius: 4px;
}
.post-images {
  display: flex;
  gap: 10px;
  flex-wrap: wrap;
  margin-top: 20px;
}

.image-small {
  width: 200px;
}

.image-medium {
  width: 400px;
}

.image-large {
  width: 600px;
}

.image-list {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 10px;
}

.image-item {
    border: 1px solid #ddd;
    padding: 10px;
    border-radius: 4px;
    background-color: white;
}

.post-content img {
    max-width: 100%;
    height: auto;
    border-radius: 4px;
    margin: 10px 0;
}

.post-content {
    line-height: 1.6;
    font-size: 16px;
}

.post-content p {
    margin: 10px 0;
}

.post-content ul, .post-content ol {
    padding-left: 20px;
}

.post-content blockquote {
    border-left: 3px solid #3498db;
    padding-left: 15px;
    margin-left: 0;
    color: #555;
}

/* Стили для изображений в посте */
.ql-editor img {
    max-width: 100%;
    height: auto;
    border-radius: 4px;
    margin: 10px 0;
}

/* Выравнивание изображений */
.ql-editor img.align-left {
    float: left;
    margin-right: 15px;
}

.ql-editor img.align-right {
    float: right;
    margin-left: 15px;
}

.ql-editor img.align-center {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

/* Размеры изображений */
.ql-editor img.size-small {
    max-width: 200px;
}

.ql-editor img.size-medium {
    max-width: 400px;
}

.ql-editor img.size-large {
    max-width: 600px;
}

.item-price {
    margin: 10px 0;
    font-size: 1.2em;
}

.price {
    font-weight: bold;
    color: #27ae60;
}

.form-group input[type="number"] {
    width: 100%;
    padding: 8px;
    margin-bottom: 15px;
    border: 1px solid #ddd;
    border-radius: 4px;
}
------------------------------------------------------------------------------------------------------------------------------------------------
#app.py

# -*- coding: utf-8 -*-
from flask import Flask, render_template, request, redirect, url_for, flash, abort
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
import os
from datetime import datetime
from flask_migrate import Migrate


app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(os.path.abspath(os.path.dirname(__file__)), 'database.db')
app.config['SECRET_KEY'] = 'ваш_секретный_ключ'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = 'static/uploads'
app.config['ALLOWED_EXTENSIONS'] = {'png', 'jpg', 'jpeg', 'gif'}

db = SQLAlchemy(app)
migrate = Migrate(app, db)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

class User(UserMixin, db.Model):
    __tablename__ = 'user'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)
    posts = db.relationship('Post', backref='author', lazy=True, cascade='all, delete-orphan')
    comments = db.relationship('Comment', backref='author', lazy=True)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

class Post(db.Model):
    __tablename__ = 'post'
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    section = db.Column(db.String(20))
    price = db.Column(db.Float, nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    views = db.Column(db.Integer, default=0)
    comments = db.relationship('Comment', backref='post', lazy=True, cascade='all, delete-orphan')
    images = db.relationship('Image', backref='post', lazy=True, cascade='all, delete-orphan')

class Image(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    filename = db.Column(db.String(100), nullable=False)
    order = db.Column(db.Integer, default=0)
    size = db.Column(db.String(20), default='medium')
    post_id = db.Column(db.Integer, db.ForeignKey('post.id'), nullable=False)

class Comment(db.Model):
    __tablename__ = 'comment'
    id = db.Column(db.Integer, primary_key=True)
    text = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    post_id = db.Column(db.Integer, db.ForeignKey('post.id'), nullable=False)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

@app.route('/')
def index():
    page = request.args.get('page', 1, type=int)
    posts = Post.query.order_by(Post.created_at.desc()).paginate(page=page, per_page=10)
    return render_template('index.html', posts=posts)

@app.route('/post/<int:post_id>')
def post_detail(post_id):
    post = Post.query.get_or_404(post_id)
    post.views = post.views + 1 if post.views else 1
    db.session.commit()
    return render_template('post_detail.html', post=post)

@app.route('/post/<int:post_id>/comment', methods=['POST'])
@login_required
def add_comment(post_id):
    post = Post.query.get_or_404(post_id)
    text = request.form.get('text')
    
    if not text:
        flash('Комментарий не может быть пустым', 'error')
        return redirect(url_for('post_detail', post_id=post_id))
    
    comment = Comment(
        text=text,
        user_id=current_user.id,
        post_id=post.id
    )
    
    db.session.add(comment)
    db.session.commit()
    
    flash('Комментарий добавлен', 'success')
    return redirect(url_for('post_detail', post_id=post_id))

@app.route('/comment/<int:comment_id>/delete', methods=['POST'])
@login_required
def delete_comment(comment_id):
    comment = Comment.query.get_or_404(comment_id)
    
    if comment.user_id != current_user.id and not current_user.is_admin:
        abort(403)
    
    db.session.delete(comment)
    db.session.commit()
    
    flash('Комментарий удалён', 'success')
    return redirect(url_for('post_detail', post_id=comment.post_id))

@app.route('/profile')
@login_required
def profile():
    page = request.args.get('page', 1, type=int)
    # Используем запрос вместо отношения
    posts = Post.query.filter_by(user_id=current_user.id).order_by(Post.created_at.desc()).paginate(page=page, per_page=5)
    return render_template('profile.html', posts=posts)

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        if User.query.filter_by(username=username).first():
            flash('Имя пользователя уже занято!', 'error')
            return redirect(url_for('register'))
        
        new_user = User(username=username)
        new_user.set_password(password)
        db.session.add(new_user)
        db.session.commit()
        
        flash('Регистрация успешна!', 'success')
        return redirect(url_for('login'))
    
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()
        
        if user and user.check_password(password):
            login_user(user)
            return redirect(url_for('index'))
        else:
            flash('Неверный логин или пароль!', 'error')
    
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))

@app.route('/forum')
def forum():
    page = request.args.get('page', 1, type=int)
    search_query = request.args.get('search', '')
    section_filter = request.args.get('section_filter', '')
    
    query = Post.query.filter(Post.section != 'marketplace')
    
    if search_query:
        query = query.filter(
            (Post.title.ilike(f'%{search_query}%')) | 
            (Post.content.ilike(f'%{search_query}%'))
        )
    
    if section_filter:
        query = query.filter_by(section=section_filter)
    
    posts = query.order_by(Post.created_at.desc()).paginate(page=page, per_page=10)
    return render_template('forum.html', posts=posts, search_query=search_query, section_filter=section_filter)

@app.route('/marketplace')
def marketplace():
    page = request.args.get('page', 1, type=int)
    search_query = request.args.get('search', '')
    price_filter = request.args.get('price_filter', '')
    
    query = Post.query.filter_by(section='marketplace').options(
        db.joinedload(Post.comments),
        db.joinedload(Post.images)
    )
    
    if search_query:
        query = query.filter(
            (Post.title.ilike(f'%{search_query}%')) 
        )
    if price_filter:
        if price_filter == '0-1000':
            query = query.filter(Post.price <= 1000)
        elif price_filter == '1000-5000':
            query = query.filter(Post.price.between(1000, 5000))
        elif price_filter == '5000+':
            query = query.filter(Post.price >= 5000)
    
    items = query.order_by(Post.created_at.desc()).paginate(page=page, per_page=5)
    return render_template('marketplace.html', items=items, search_query=search_query, price_filter=price_filter)

# Создание поста
@app.route('/create_post', methods=['GET', 'POST'])
@login_required
def create_post():
    if request.method == 'POST':
        # Получаем данные из формы
        title = request.form.get('title')
        content = request.form.get('content')
        section = request.form.get('section')
        price = request.form.get('price')
        
        # Валидация обязательных полей
        if not title or not content:
            flash('Заголовок и содержание поста обязательны', 'error')
            return redirect(url_for('create_post'))
        
        # Преобразуем цену в число, если она указана
        try:
            price_value = float(price) if price else None
        except ValueError:
            flash('Некорректное значение цены', 'error')
            return redirect(url_for('create_post'))
        
        # Создаем новый пост
        new_post = Post(
            title=title,
            content=content,
            section=section,
            price=price_value,
            user_id=current_user.id
        )
        
        try:
            db.session.add(new_post)
            db.session.commit()
            
            # Обработка изображений
            if 'images' in request.files:
                for file in request.files.getlist('images'):
                    if file and allowed_file(file.filename):
                        filename = secure_filename(file.filename)
                        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                        file.save(filepath)
                        
                        img = Image(
                            filename=filename,
                            post_id=new_post.id
                        )
                        db.session.add(img)
                
                db.session.commit()
            
            flash('Пост успешно создан!', 'success')
            return redirect(url_for('post_detail', post_id=new_post.id))
            
        except Exception as e:
            db.session.rollback()
            flash(f'Ошибка при создании поста: {str(e)}', 'error')
            return redirect(url_for('create_post'))
    
    # GET запрос - отображаем форму
    section = request.args.get('section')
    show_price = request.args.get('price') == '1'
    return render_template('create_post.html', section=section, show_price=show_price)

# Редактирование поста
@app.route('/edit_post/<int:post_id>', methods=['GET', 'POST'])
@login_required
def edit_post(post_id):
    post = Post.query.get_or_404(post_id)
    
    # Проверка прав на редактирование
    if post.user_id != current_user.id:
        abort(403)

    if request.method == 'POST':
        # Обновляем данные поста
        post.title = request.form['title']
        post.content = request.form['content']
        post.section = request.form['section']
        
        # Обработка цены
        price = request.form.get('price')
        try:
            post.price = float(price) if price else None
        except ValueError:
            flash('Некорректное значение цены', 'error')
            return redirect(url_for('edit_post', post_id=post.id))
        
        # Обработка новых изображений
        for i, file in enumerate(request.files.getlist('new_images')):
            if file and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                file.save(filepath)
                
                image = Image(
                    filename=filename,
                    order=len(post.images) + i,
                    post_id=post.id
                )
                db.session.add(image)
        
        db.session.commit()
        flash('Пост успешно обновлен!', 'success')
        return redirect(url_for('post_detail', post_id=post.id))
    
    # GET запрос - отображаем форму редактирования
    return render_template('edit_post.html', post=post)

@app.route('/delete_post/<int:post_id>', methods=['POST'])
@login_required
def delete_post(post_id):
    post = Post.query.get_or_404(post_id)
    
    if post.user_id != current_user.id:
        abort(403)
    
    try:
        # Удаляем изображения
        for image in post.images:
            try:
                os.remove(os.path.join(app.config['UPLOAD_FOLDER'], image.filename))
            except OSError:
                pass
        
        # Удаляем сам пост (комментарии удалятся каскадно)
        db.session.delete(post)
        db.session.commit()
        
        flash('Пост успешно удален', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'Ошибка при удалении поста: {str(e)}', 'error')
    
    return redirect(url_for('forum'))

def create_test_data():
    with app.app_context():
        try:
            if User.query.first() is None:
                # Создаем тестовых пользователей
                admin = User(username="admin")
                admin.set_password("admin123")
                
                gamer = User(username="gamer1")
                gamer.set_password("qwerty")
                
                streamer = User(username="streamer")
                streamer.set_password("123456")
                
                db.session.add_all([admin, gamer, streamer])
                db.session.commit()

                # Создаем тестовые посты
                post1 = Post(
                    title="Лучшие сборки в Dota 2",
                    content="Детальные гайды по сборкам для разных героев",
                    section="guides",
                    user_id=admin.id,
                    created_at=datetime(2023, 10, 1)
                )
                
                post2 = Post(
                    title="Продается скин CS2",
                    content="Нож Butterfly | Фейд (Factory New) - 1500$",
                    section="marketplace",
                    price=1500.00,
                    user_id=gamer.id,
                    created_at=datetime(2023, 10, 2)
                )
                
                post3 = Post(
                    title="Обсуждение нового патча",
                    content="Какие изменения вас больше всего заинтересовали?",
                    section="discussion",
                    user_id=streamer.id,
                    created_at=datetime(2023, 10, 3)
                )
                
                db.session.add_all([post1, post2, post3])
                db.session.commit()

                # # Создаем тестовые изображения
                # img1 = Image(
                #     filename="test_image1.jpg",
                #     post_id=post1.id
                # )
                # img2 = Image(
                #     filename="test_image2.jpg",
                #     post_id=post2.id
                # )
                
                # db.session.add_all([img1, img2])
                # db.session.commit()

                # Создаем тестовые комментарии
                comment1 = Comment(
                    text="Отличный гайд, спасибо!",
                    user_id=gamer.id,
                    post_id=post1.id,
                    created_at=datetime(2023, 10, 1, 12, 30)
                )
                
                comment2 = Comment(
                    text="Сколько просите за нож?",
                    user_id=streamer.id,
                    post_id=post2.id,
                    created_at=datetime(2023, 10, 2, 14, 15)
                )
                
                db.session.add_all([comment1, comment2])
                db.session.commit()
                
                print("Тестовые данные успешно созданы!")
        except Exception as e:
            db.session.rollback()
            print(f"Ошибка при создании тестовых данных: {str(e)}")
            
if __name__ == '__main__':
    with app.app_context():
        # Удаляем все таблицы (только для разработки!)
        # db.drop_all()
        # Создаем новые таблицы
        db.create_all()
        # Заполняем тестовыми данными
        # create_test_data()
    app.run(debug=True)